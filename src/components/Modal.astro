---
interface Props {
  closeText?: string
  children?: HTMLElement | HTMLElement[]
}

const { closeText = 'Close' } = Astro.props
---

<dialog class="modal">
  <div class="modal__inner">
    <div class="modal__content">
      <slot>Modal description.</slot>
    </div>
    <div class="modal__close">
      <button>{closeText}</button>
    </div>
  </div>
</dialog>


<script>
  type FocusableElement =
    | HTMLAnchorElement
    | HTMLButtonElement
    | HTMLInputElement
    | HTMLTextAreaElement
    | HTMLSelectElement
    | HTMLDetailsElement

  // variables
  let modals = document.querySelectorAll<HTMLDialogElement>('.modal')

  // abort controllers for global event listeners
  let trapFocusController: AbortController | undefined
  let keydownController: AbortController | undefined

  const getKeyboardFocusableElements = (element: HTMLElement) => {
    return [
      ...element.querySelectorAll<FocusableElement>(
        'a, button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])'
      ),
    ].filter((el) => !el.hasAttribute('disabled'))
  }

  const trapFocus = (event: KeyboardEvent, modal: HTMLDialogElement) => {
    const focusables = getKeyboardFocusableElements(modal)

    // These will not be undefined as a modal always has at least one <button>
    const firstFocusable = focusables[0]!
    const lastFocusable = focusables[focusables.length - 1]!

    if (document.activeElement === lastFocusable && event.key === 'Tab' && !event.shiftKey) {
      event.preventDefault()
      firstFocusable.focus()
    }

    if (document.activeElement === firstFocusable && event.key === 'Tab' && event.shiftKey) {
      event.preventDefault()
      lastFocusable.focus()
    }
  }

  const openModal = (modal: HTMLDialogElement) => {
    modal.showModal()
    modal.dispatchEvent(new CustomEvent('modal-open', {bubbles: true }))
  }

  const closeModal = () => {
    modals.forEach((modal) => {
      const modalId = modal.getAttribute('aria-labelledby')
      modal.close()
      trapFocusController?.abort()
      keydownController?.abort()
      modal.dispatchEvent(new CustomEvent('modal-close', { bubbles: true }))
    })
  }

  // execution
  modals.forEach((modal) => {
    const modalCloseButton = modal.querySelector('.modal__close button')
    modalCloseButton!.addEventListener('click', closeModal)
  })

  window.close = closeModal

  // Listen for view transitions
  document.addEventListener('astro:after-swap', () => {
    // reset variables
    modals = document.querySelectorAll<HTMLDialogElement>('.modal')

    // execution
    modals.forEach((modal) => {
      const modalCloseButton = modal.querySelector('.modal__close button')

      modalCloseButton!.addEventListener('click', closeModal)
    })
  })
</script>

<style is:global>
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
    filter: blur(6px);
  }

  :where(.modal) {
    color: black;
    background-color: white;
    border: 0.5rem solid black;
    border-radius: 1rem;
    padding: 0;
  }
  .modal {
    max-width: 80vw;
  }
  .modal__inner {
    width: clamp(30ch, 70%, 75ch);
    border-radius: 1rem;
    width: 100%;
  }

  .modal__content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 2rem;
    background-color: #13151a;
    color: white
  }

  .modal__close {
    width: 100%;
  }

  .modal__close button {
    border: none;
    background-color: lightgrey;
    border-bottom-left-radius: 0.4rem;
    border-bottom-right-radius: 0.4rem;
    color: black;
    text-align: right;
    transition: background-color 0.15s ease-in-out;
    width: 100%;
    margin: 0;
    padding: 0.5rem;
    background-color: rgb(150, 150, 148);
    font-family: 'Consolas', 'Roboto', sans-serif;
    font-size: 1rem;
  }

  .modal__close button:hover,
  .modal__close button:focus {
    background-color: grey;
    cursor: pointer;
    text-decoration: underline;
  }

  /* Animation */
  dialog[open],
  dialog[open]::backdrop {
    animation: fadein 0.3s ease-in-out;
  }

  @keyframes fadein {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>